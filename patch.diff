diff --git a/app.js b/app.js
index c2e2e33..6bfb81a 100644
--- a/app.js
+++ b/app.js
@@ -1,4 +1,4 @@
-// node app.js
+// node app.js em desafioLabirinto
 const express = require('express')
   const app = express()
   const port = 3000
diff --git a/index.css b/index.css
index f97eea5..24b9e8c 100644
--- a/index.css
+++ b/index.css
@@ -43,13 +43,52 @@ header {
   margin-left: auto;
   margin-right: auto;
   width: fit-content;
+  justify-content: center;
+  align-items: center;
 }
 
-header h1, h3{
+header h1 {
+  display: inline;
+  font-size: 3em;
+}
+
+header h1, h2{
   width: fit-content;
   margin: 10px auto;
 }
 
+/* From https://css-loaders.com/maze/ */
+.loader {
+  width: 70px;
+  aspect-ratio: 2;
+  background:
+    radial-gradient(farthest-side,#fff 90%,#ffffff00) 0 0/8px 8px,
+    linear-gradient(#000 0 0) 100% 0/30px 10px,
+    linear-gradient(#000 0 0) 0 100%/30px 10px,
+    repeating-linear-gradient(90deg,#000 0 10px,#ffffff00 0 30px);
+    /* radial-gradient(farthest-side,#000 90%,#0000) 0 0/8px 8px,
+    linear-gradient(#fff 0 0) 100% 0/30px 10px,
+    linear-gradient(#fff 0 0) 0 100%/30px 10px,
+    repeating-linear-gradient(90deg,#fff 0 10px,#0000 0 30px); */
+  background-repeat: no-repeat;
+  /* background-color: black;
+  border: black 1px; */
+  animation: l6 2s infinite;
+  display: inline-block;
+  margin-right: 15px;
+}
+@keyframes l6 {
+  0%    {background-position:left 1px bottom 1px,100% 0,0 100%,0 0}
+  12.5% {background-position:left 50% bottom 1px,100% 0,0 100%,0 0}
+  25%   {background-position:left 50% top 1px,100% 0,0 100%,0 0}
+  37.5% {background-position:right 1px top 1px,100% 0,0 100%,0 0}
+  50%   {background-position:right 1px bottom 1px,0 0,100% 100%,0 0}
+  62.5% {background-position:right 50% bottom 1px,0 0,100% 100%,0 0}
+  75%   {background-position:right 50% top 1px,0 0,100% 100%,0 0}
+  87.5% {background-position:left 1px top 1px,0 0,100% 100%,0 0}
+  100%  {background-position:left 1px bottom 1px,100% 0,0 100%,0 0}
+}
+
 * {
   box-sizing: border-box;
 }
diff --git a/index.html b/index.html
index 1f451f7..25f56a3 100644
--- a/index.html
+++ b/index.html
@@ -8,13 +8,14 @@
     <link rel="icon" type="image/x-icon" href="faviconMaze.jpg">
 </head>
 
-<body>
+<body onload="ResizeMaze()">
   <header>
+    <div class="loader"></div>
     <h1>Maze "Builder" 3000</h1>
-    <h3>Breaking walls in the complicated path of life</h3>
+    <h2>Breaking walls in the complicated path of life</h2>
   </header>
     <div class="grid-container">
-        <div class="grid-item" id="1">1</div>
+        <!--<div class="grid-item" id="1">1</div>
         <div class="grid-item" id="2">2</div>
         <div class="grid-item" id="3">3</div>
         <div class="grid-item" id="4">4</div>
@@ -1037,7 +1038,7 @@
         <div class="grid-item" id="1021">1021</div>
         <div class="grid-item" id="1022">1022</div>
         <div class="grid-item" id="1023">1023</div>
-        <div class="grid-item" id="1024">1024</div>      
+        <div class="grid-item" id="1024">1024</div>   -->   
       </div>
 
       <div class="Actions">
@@ -1050,10 +1051,19 @@
         <button onclick="RestoreMaze()" > 
           RestoreMaze
       </button>
-      <button onclick="SolutionShowcase()()" > 
+      <button onclick="SolutionShowcase()" > 
         Solution Showcase
     </button>
     </div>
+    <div class="Actions">
+      <label>Columns:</label>
+      <input type="number" class="MazeSize" id="columns" value="16">
+      <label>Rows:</label>
+      <input type="number" class="MazeSize" id="rows" value="16">
+      <button onclick="ResizeMaze() "> 
+        Resize Maze
+      </button>
+  </div>
 </body>
 <script src="index.js"></script>
 </html>
\ No newline at end of file
diff --git a/index.js b/index.js
index defb084..8c00091 100644
--- a/index.js
+++ b/index.js
@@ -1,8 +1,8 @@
 let solution = []; 
+let total, columns, rows;
 
 function BacktrackerMazeGenerator() {
     RestoreMaze();
-    /*let rand = Math.floor(Math.random() * 1024) + 1;*/
     let stack = [1];
     let visited = [1];
     do {
@@ -60,7 +60,6 @@ function BacktrackerMazeGenerator() {
             if(visited.includes(1024) != true) {
                 solution.pop();
             }
-            //console.log("Backtracking");
         }
     } while(stack.length != 0)
         console.log(solution);
@@ -134,11 +133,6 @@ function WilsonMazeGenerator() {
                     directions.push(4); break;
                 }
         } while (visited.includes(nextStep) == false) 
-        //Retirar start dos visitados caso ele tenha sido ignorado com o caminho chegando em outra ala do labirinto
-        /*if(path.includes(start) == false && notVisited.length != 0) {
-            visited.pop(start);
-            notVisited.push(start);
-        }*/
         //limpar o path
         for(let i = 0; i < path.length; i++) {
             let step = path[i];  
@@ -152,8 +146,6 @@ function WilsonMazeGenerator() {
         console.log("Filtered path: "+path);
         console.log("Filtered directions: "+directions);
         //Criar os caminhos
-
-        //Ver esse aqui, deve estar vendo errado os visited e not
         for(let i = 0; i < path.length-1; i++) {
             //console.log(i)
             let step = path[i]; 
@@ -207,4 +199,89 @@ function WilsonMazeGenerator() {
 
 //Quando só sobra um elemento não visitado e esse é usado no start ele não sabe oq fazer com o último elemento
 
-//Todos os starts não mostram efeito algum, eles não são implementados no path provavelmente
\ No newline at end of file
+//Todos os starts não mostram efeito algum, eles não são implementados no path provavelmente
+
+//Código adaptado de emkey08, https://jsfiddle.net/emkey08/zgvtjc51
+function setInputFilter(textbox, inputFilter, errMsg) {
+    [ "input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop", "focusout" ].forEach(function(event) {
+      textbox.addEventListener(event, function(e) {
+        if (inputFilter(this.value)) {
+          // Accepted value.
+          if ([ "keydown", "mousedown", "focusout" ].indexOf(e.type) >= 0) {
+            this.classList.remove("input-error");
+            this.setCustomValidity("");
+          }
+          
+          this.oldValue = this.value;
+          this.oldSelectionStart = this.selectionStart;
+          this.oldSelectionEnd = this.selectionEnd;
+        }
+        else if (this.hasOwnProperty("oldValue")) {
+          // Rejected value: restore the previous one.
+          this.classList.add("input-error");
+          this.setCustomValidity(errMsg);
+          this.reportValidity();
+          this.value = this.oldValue;
+          this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
+        }
+        else {
+          // Rejected value: nothing to restore.
+          this.value = "";
+        }
+      });
+    });
+  }
+
+for(i = 0; i < document.getElementsByClassName("MazeSize").length; i++) {
+    setInputFilter(document.getElementsByClassName("MazeSize")[i], function(value) {
+        return /^\d*$/.test(value) && (value === "" || parseInt(value) <= 32 && parseInt(value) >= 2);
+    }, "Must be between 2 and 32");
+}
+
+//Analisar depois a possibilidade de substituir sobre variáveis globais
+//https://blog.devgenius.io/passing-data-variable-between-functions-in-javascript-8a3a10abc169
+/*
+function passTotal (total) {
+    console.log("Total:"+total);
+    return total;
+}
+
+function passColumns (columns) {
+    console.log("Columns:"+columns);
+    return columns;
+}
+
+function passRows (rows) {
+    console.log("Rows:"+rows);
+    return rows;
+}
+*/
+function ResizeMaze() {
+    let columns = document.getElementById("columns").value;
+    let rows = document.getElementById("rows").value;
+    let total = columns * rows;
+    let maze = document.getElementsByClassName("grid-container")[0];
+    let size = '';
+    for(i = 0; i < rows; i++) { size += 'auto ';}
+    console.log("size: "+size);
+    maze.style.gridTemplateColumns = size;
+    maze.innerHTML = '';
+    for(i = 0; i < total; i++) {
+        maze.innerHTML += '<div class="grid-item" id="'+(i+1)+'">'+(i+1)+'</div>';
+    }
+    /*
+    passTotal(total);
+    passColumns(columns);
+    passRows(rows);*/
+    console.log("Total:"+total);
+    console.log("Columns:"+columns);
+    console.log("Rows:"+rows);
+}
+
+var element = document.createElement("div");
+element.appendChild(document.createTextNode('The man who mistook his wife for a hat'));
+document.getElementById('lc').appendChild(element);
+
+let cell = document.createElement("div");
+cell.appendChild(document.createTextNode('The man who mistook his wife for a hat'));//'<div class="grid-item" id="">'(i+1)'</div>'
+document.getElementById("grid-container").appendChild(cell);
\ No newline at end of file
